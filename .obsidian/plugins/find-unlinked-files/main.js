'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var MyPlugin = /** @class */ (function (_super) {
    __extends(MyPlugin, _super);
    function MyPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MyPlugin.prototype.onload = function () {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function () {
            var tempData;
            var _this = this;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        console.log('loading ' + this.manifest.name + " plugin");
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        tempData = _g.sent();
                        this.settings = {
                            disableWorkingLinks: (_a = tempData === null || tempData === void 0 ? void 0 : tempData.disableWorkingLinks) !== null && _a !== void 0 ? _a : false,
                            directoriesToIgnore: (_b = tempData === null || tempData === void 0 ? void 0 : tempData.directoriesToIgnore) !== null && _b !== void 0 ? _b : [],
                            filesToIgnore: (_c = tempData === null || tempData === void 0 ? void 0 : tempData.filesToIgnore) !== null && _c !== void 0 ? _c : [],
                            fileTypesToIgnore: (_d = tempData === null || tempData === void 0 ? void 0 : tempData.fileTypesToIgnore) !== null && _d !== void 0 ? _d : [],
                            linksToIgnore: (_e = tempData === null || tempData === void 0 ? void 0 : tempData.linksToIgnore) !== null && _e !== void 0 ? _e : [],
                            tagsToIgnore: (_f = tempData === null || tempData === void 0 ? void 0 : tempData.tagsToIgnore) !== null && _f !== void 0 ? _f : [],
                        };
                        this.addCommand({
                            id: 'find-unlinked-files',
                            name: 'Find unlinked files',
                            callback: function () { return __awaiter(_this, void 0, void 0, function () {
                                var outFile, files, markdownFiles, links, notLinkedFiles, text, prefix, fileIsAlreadyOpened;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            outFile = this.manifest.name + " plugin output.md";
                                            files = this.app.vault.getFiles();
                                            markdownFiles = this.app.vault.getMarkdownFiles();
                                            links = [];
                                            markdownFiles.forEach(function (markFile) {
                                                if (markFile.path == outFile)
                                                    return;
                                                obsidian.iterateCacheRefs(_this.app.metadataCache.getFileCache(markFile), function (cb) {
                                                    var txt = _this.app.metadataCache.getFirstLinkpathDest(obsidian.getLinkpath(cb.link), markFile.path);
                                                    if (txt != null)
                                                        links.push(txt.path);
                                                });
                                            });
                                            notLinkedFiles = [];
                                            files.forEach(function (file) {
                                                if (file.path == outFile)
                                                    return;
                                                //filetypes to ignore by default
                                                if (["css"].contains(file.extension))
                                                    return;
                                                if (_this.settings.fileTypesToIgnore.contains(file.extension))
                                                    return;
                                                if (_this.findLinksToIgnore(file))
                                                    return;
                                                if (_this.findTagsToIgnore(file))
                                                    return;
                                                if (_this.findDirectoryToIgnore(file))
                                                    return;
                                                if (_this.settings.filesToIgnore.contains(file.path))
                                                    return;
                                                if (links.contains(file.path))
                                                    return;
                                                notLinkedFiles.push(file);
                                            });
                                            text = "";
                                            if (this.settings.disableWorkingLinks)
                                                prefix = "	";
                                            else
                                                prefix = "";
                                            notLinkedFiles.forEach(function (file) {
                                                text += prefix + "- [[" + _this.app.metadataCache.fileToLinktext(file, "/") + "]]\n";
                                            });
                                            return [4 /*yield*/, this.app.vault.adapter.write(outFile, text)];
                                        case 1:
                                            _a.sent();
                                            fileIsAlreadyOpened = false;
                                            this.app.workspace.iterateAllLeaves(function (leaf) {
                                                if (outFile.startsWith(leaf.getDisplayText())) {
                                                    fileIsAlreadyOpened = true;
                                                }
                                            });
                                            if (!fileIsAlreadyOpened)
                                                this.app.workspace.openLinkText(outFile, "/", true);
                                            return [2 /*return*/];
                                    }
                                });
                            }); },
                        });
                        this.addSettingTab(new SettingsTab(this.app, this));
                        return [2 /*return*/];
                }
            });
        });
    };
    MyPlugin.prototype.findDirectoryToIgnore = function (file) {
        var found = false;
        this.settings.directoriesToIgnore.forEach(function (value) {
            if (file.path.startsWith(value) && value.length != 0)
                found = true;
        });
        return found;
    };
    MyPlugin.prototype.findLinksToIgnore = function (file) {
        var _this = this;
        var found = false;
        obsidian.iterateCacheRefs(this.app.metadataCache.getFileCache(file), function (cb) {
            var _a;
            var link = (_a = _this.app.metadataCache.getFirstLinkpathDest(cb.link, file.path)) === null || _a === void 0 ? void 0 : _a.path;
            if (!link)
                return;
            if (_this.settings.linksToIgnore.contains(link))
                found = true;
        });
        return found;
    };
    MyPlugin.prototype.findTagsToIgnore = function (file) {
        var _this = this;
        var found = false;
        var tags = this.app.metadataCache.getFileCache(file).tags;
        if (!tags)
            return false;
        tags.forEach(function (tag) {
            if (_this.settings.tagsToIgnore.contains(tag.tag.substring(1)))
                found = true;
        });
        return found;
    };
    MyPlugin.prototype.onunload = function () {
        console.log('unloading ' + this.manifest.name + " plugin");
    };
    return MyPlugin;
}(obsidian.Plugin));
var SettingsTab = /** @class */ (function (_super) {
    __extends(SettingsTab, _super);
    function SettingsTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    SettingsTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl("h2", { text: this.plugin.manifest.name });
        new obsidian.Setting(containerEl)
            .setName('Disable working links')
            .setDesc('Indent lines to disable the link and to clean up the graph view')
            .addToggle(function (cb) { return cb.onChange(function (value) {
            _this.plugin.settings.disableWorkingLinks = value;
            _this.plugin.saveData(_this.plugin.settings);
        }).setValue(_this.plugin.settings.disableWorkingLinks); });
        new obsidian.Setting(containerEl)
            .setName("Directories to ignore.")
            .setDesc("Add each directory path in a new line")
            .addTextArea(function (cb) { return cb
            .setPlaceholder("Directory/Subdirectory")
            .setValue(_this.plugin.settings.directoriesToIgnore.join("\n"))
            .onChange(function (value) {
            var paths = value.trim().split("\n").map(function (value) { return formatPath(value, true); });
            _this.plugin.settings.directoriesToIgnore = paths;
            _this.plugin.saveData(_this.plugin.settings);
        }); });
        new obsidian.Setting(containerEl)
            .setName("Files to ignore.")
            .setDesc("Add each file path in a new line (with file extension!)")
            .addTextArea(function (cb) { return cb
            .setPlaceholder("Directory/file.md")
            .setValue(_this.plugin.settings.filesToIgnore.join("\n"))
            .onChange(function (value) {
            var paths = value.trim().split("\n").map(function (value) { return formatPath(value, false); });
            _this.plugin.settings.filesToIgnore = paths;
            _this.plugin.saveData(_this.plugin.settings);
        }); });
        new obsidian.Setting(containerEl)
            .setName("Links to ignore.")
            .setDesc("Ignores files, which contain the given file as link. Add each file path in a new line (with file extension!)")
            .addTextArea(function (cb) { return cb
            .setPlaceholder("Directory/file.md")
            .setValue(_this.plugin.settings.linksToIgnore.join("\n"))
            .onChange(function (value) {
            var paths = value.trim().split("\n").map(function (value) { return formatPath(value, false); });
            _this.plugin.settings.linksToIgnore = paths;
            _this.plugin.saveData(_this.plugin.settings);
        }); });
        new obsidian.Setting(containerEl)
            .setName("Filetypes to ignore.")
            .setDesc("Add each filetype separated by comma")
            .addTextArea(function (cb) { return cb
            .setPlaceholder("docx,txt")
            .setValue(_this.plugin.settings.fileTypesToIgnore.join(","))
            .onChange(function (value) {
            var extensions = value.trim().split(",");
            _this.plugin.settings.fileTypesToIgnore = extensions;
            _this.plugin.saveData(_this.plugin.settings);
        }); });
        new obsidian.Setting(containerEl)
            .setName("Tags to ignore.")
            .setDesc("Ignore files, which contain the given tag. Add each tag separated by comma (without `#`)")
            .addTextArea(function (cb) { return cb
            .setPlaceholder("todo,unfinished")
            .setValue(_this.plugin.settings.tagsToIgnore.join(","))
            .onChange(function (value) {
            var tags = value.trim().split(",");
            _this.plugin.settings.tagsToIgnore = tags;
            _this.plugin.saveData(_this.plugin.settings);
        }); });
        function formatPath(path, addDirectorySlash) {
            if (path.length == 0)
                return path;
            path = obsidian.normalizePath(path);
            if (addDirectorySlash)
                return path + "/";
            else
                return path;
        }
    };
    return SettingsTab;
}(obsidian.PluginSettingTab));

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
